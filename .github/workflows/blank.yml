# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    types:
      - opened
      - synchronize
        
    branches: [ "main", "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  COMMIT_HASH: ${{ github.event.pull_request.head.sha }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job provides signature verification of commits
  verify:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      - name: Install Git
        run: |
          apt-get update -y
          apt-get install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          apt-get update -y
          apt-get install -y git
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Runs a set of commands using the runners shell
      - name: Install required dependencies
        run: |
          apt-get install gnupg
          apt-get install curl
          apt-get install vim
          
      - name: Display the commit hash & branch that triggered this process
        run: echo "Triggering workflow for branch ${{ github.ref }} and commit-hash ${{ github.event.pull_request.head.sha }}"

      - name: Display the email-ID of the user
        run: |
          author_email=$(git show --format='%ae' -s "${{ env.COMMIT_HASH }}")
          echo "Email ID of the user who initiated commit $author_email"

      - name: Import the GPG public key of the committer
        env:
          GPG_PUBLIC_KEY: ${{ secrets.TEJH_GPG_PUBLIC_KEY }}
          GPG_USER_ID: ${{ github.event.commits[0].author.email }}
        run: |
          echo "$GPG_PUBLIC_KEY" > public_key.gpg
          gpg --import public_key.gpg
          gpg --list-keys
          
      - name: Verify the commit using the commiter's signature
        run: git verify-commit -v ${{ github.event.pull_request.head.sha }}

      - name: Read key from the Vault
        run: |
          curl --header "X-Vault-Namespace: anet/sw/sec/developer-pgp" --request POST --data '{"role_id": "d876db5d-71d2-a849-0925-b7bf7f4578cb","secret_id": "b44e5c5c-1424-6ad2-c8a3-5ad30565e4d2"}' https://vault.aristanetworks.com:8200/v1/auth/approle/login | jq -r '.auth.client_token' > token.txt

          TOKEN=$(cat token.txt)
          USER_ID=${{ env.COMMIT_HASH }}
          echo "Token is $TOKEN"
          echo "User ID is $USER_ID"
          curl --header "X-Vault-Namespace: anet/sw/sec/developer-pgp" --header "X-Vault-Token: ${TOKEN}" --request GET https://vault.aristanetworks.com:8200/v1/gpg/keys/${USER_ID} | jq -r '.data.public_key' | gpg --import
          gpg --list-keys



  # This job performs the actual task of Merging branches
  merge:
    # verify job needs to successfully complete before merge
    needs: verify

    # The type of runner that the job will run on
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - name: Merge Pull Request using rebasing
        run: |
          git config user.email "tejaswi.h@gmail.com"
          git config user.name "Tejaswi Haramurali"
          git fetch origin
          git checkout ${{ github.head_ref }}
          git rebase origin/main
          git checkout main
          git merge --ff-only ${{ github.head_ref }}
          git push origin main
      
          #uses: pullreminders/merge-action@v4
          #with:
          #merge_method: rebase
          #delete_branch: false
          #strict: true
      
